import os
import sys
import shutil
import logging
import cv2
import numpy as np
import re
from pathlib import Path

# –û—Ç–∫–ª—é—á–∞–µ–º Qt auto-scaling –∏ HiDPI
os.environ["QT_AUTO_SCREEN_SCALE_FACTOR"] = "0"
os.environ["QT_SCALE_FACTOR"] = "1"
os.environ["QT_ENABLE_HIGHDPI_SCALING"] = "0"

        # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–º–µ—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ—â–µ–Ω–∏–µ–º —Å–∫—Ä—ã—Ç–∞, –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ
        # ‚úÖ –ù–ê–í–ò–ì–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢: –ö–Ω–æ–ø–∫–∏ ‚óÄ‚ñ∂ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

# flake8: noqa: E402
from PyQt5.QtCore import Qt, QUrl, QSettings, pyqtSignal, QPoint
from PyQt5.QtGui import QPixmap, QDesktopServices, QColor, QImage, QPainter
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QTableWidget, QTableWidgetItem, QLabel, QFileDialog,
    QGroupBox, QRadioButton, QMessageBox, QSplitter, QSpinBox, QFormLayout,
    QButtonGroup, QColorDialog, QDoubleSpinBox, QTabWidget,
    QComboBox, QProgressBar, QSizePolicy, QCheckBox
)

from core.diff_two_color import diff_two_color
from core.slider_reveal import SliderReveal
# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–º–µ—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
from core.image_alignment import ImageAlignmentManager
from core.alignment_controls import AlignmentControlPanel


MAGICK = "magick"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
LOGFILE = "imgdiff.log"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename=LOGFILE,
    filemode='a',
    format='%(asctime)s %(levelname)s: %(message)s',
    level=logging.INFO
)

MAX_PREVIEW_SIZE = 2000

def natural_sort_key(text):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫ —Å —á–∏—Å–ª–∞–º–∏.
    –ù–∞–ø—Ä–∏–º–µ—Ä: "Page2" < "Page10" < "Page20"
    """
    def convert(text):
        return int(text) if text.isdigit() else text.lower()
    pattern = re.split('([0-9]+)', text)
    return [convert(c) for c in pattern]


def cv2_to_qimage(cv_img):
    if cv_img is None:
        return QImage()
    height, width, channel = cv_img.shape
    bytes_per_line = 3 * width
    return QImage(cv_img.data, width, height, bytes_per_line, QImage.Format_RGB888).rgbSwapped()

def safe_cv2_imread(path):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ numpy
        import numpy as np
        with open(path, 'rb') as f:
            img_array = np.asarray(bytearray(f.read()), dtype=np.uint8)
            img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
            return img
    except Exception:
        # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É cv2.imread
        return cv2.imread(str(path), cv2.IMREAD_COLOR)

def load_pixmap_scaled(path, max_size=MAX_PREVIEW_SIZE):
    img = safe_cv2_imread(path)
    if img is None: return QPixmap()
    h, w = img.shape[:2]
    if h > max_size or w > max_size:
        scale = max_size / max(h, w)
        img = cv2.resize(img, (int(w*scale), int(h*scale)), interpolation=cv2.INTER_AREA)
    return QPixmap.fromImage(cv2_to_qimage(img))

class DndTableWidget(QTableWidget):
    directory_dropped = pyqtSignal(str)

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.setAcceptDrops(True)

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls():
            event.acceptProposedAction()

    def dragMoveEvent(self, event):
        event.acceptProposedAction()

    def dropEvent(self, event):
        urls = event.mimeData().urls()
        if not urls:
            return
        dir_path = urls[0].toLocalFile()
        if os.path.isdir(dir_path):
            self.directory_dropped.emit(dir_path)

class FilteredTable(QWidget):
    def __init__(self, label, settings_key, parent=None):
        super().__init__(parent)
        self.settings_key = settings_key
        self._layout = QVBoxLayout(self)
        
        # üìç –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Ç–∫–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
        header_layout = QHBoxLayout()
        self.dir_btn = QPushButton(label)
        self.dir_btn.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Fixed)
        
        # üè∑Ô∏è –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
        self.path_label = QLabel("–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        self.path_label.setStyleSheet("color: #666; font-style: italic; padding: 4px;")
        self.path_label.setWordWrap(True)
        self.path_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        
        header_layout.addWidget(self.dir_btn)
        header_layout.addWidget(self.path_label)
        
        # --- üîç –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä: QComboBox —Å –∏—Å—Ç–æ—Ä–∏–µ–π ---
        filter_row = QHBoxLayout()
        self.filter_combo = QComboBox()
        self.filter_combo.setEditable(True)
        self.filter_combo.setInsertPolicy(QComboBox.InsertAtTop)
        self.filter_combo.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.filter_combo.setEditable(True)
        self.filter_combo.setMinimumWidth(80)
        self.filter_combo.setMaximumWidth(200)
        self.filter_combo.setToolTip("–§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏...")
        self.filter_combo.setDuplicatesEnabled(False)
        self.filter_combo.setMaxCount(20)
        self.filter_combo.setCurrentText("")
        self.filter_combo.lineEdit().setPlaceholderText("–§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏...")
        self.filter_combo.lineEdit().editingFinished.connect(self.add_filter_to_history)
        
        # üéØ –ö–Ω–æ–ø–∫–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        # ‚úï –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        self.clear_filter_btn = QPushButton('‚úï')
        self.clear_filter_btn.setToolTip("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
        self.clear_filter_btn.setFixedWidth(32)
        self.clear_filter_btn.setStyleSheet("""
            QPushButton {
                background: #ff6b6b;
                color: white;
                border: none;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: #ff5252;
            }
        """)
        self.clear_filter_btn.clicked.connect(self.clear_filter)
        
        # üóë –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        self.clear_history_btn = QPushButton('üóë')
        self.clear_history_btn.setToolTip("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ñ–∏–ª—å—Ç—Ä–æ–≤")
        self.clear_history_btn.setFixedWidth(32)
        self.clear_history_btn.setStyleSheet("""
            QPushButton {
                background: #ffa726;
                color: white;
                border: none;
                border-radius: 4px;
                font-size: 14px;
            }
            QPushButton:hover {
                background: #ff9800;
            }
        """)
        self.clear_history_btn.clicked.connect(self.clear_filter_history)
        
        # üîÑ –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.refresh_btn = QPushButton('üîÑ')
        self.refresh_btn.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏")
        self.refresh_btn.setFixedWidth(32)
        self.refresh_btn.setStyleSheet("""
            QPushButton {
                background: #42a5f5;
                color: white;
                border: none;
                border-radius: 4px;
                font-size: 14px;
            }
            QPushButton:hover {
                background: #2196f3;
            }
        """)
        self.refresh_btn.clicked.connect(self.refresh_dir)
        
        # ‚Üë‚Üì –ö–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.sort_asc_btn = QPushButton('‚Üë')
        self.sort_asc_btn.setToolTip("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é")
        self.sort_asc_btn.setFixedWidth(32)
        self.sort_asc_btn.setStyleSheet("""
            QPushButton {
                background: #66bb6a;
                color: white;
                border: none;
                border-radius: 4px;
                font-weight: bold;
                font-size: 16px;
            }
            QPushButton:hover {
                background: #4caf50;
            }
        """)
        self.sort_asc_btn.clicked.connect(self.sort_ascending)
        
        self.sort_desc_btn = QPushButton('‚Üì')
        self.sort_desc_btn.setToolTip("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é")
        self.sort_desc_btn.setFixedWidth(32)
        self.sort_desc_btn.setStyleSheet("""
            QPushButton {
                background: #66bb6a;
                color: white;
                border: none;
                border-radius: 4px;
                font-weight: bold;
                font-size: 16px;
            }
            QPushButton:hover {
                background: #4caf50;
            }
        """)
        self.sort_desc_btn.clicked.connect(self.sort_descending)
        
        filter_row.addWidget(self.filter_combo)
        filter_row.addWidget(self.clear_filter_btn)
        filter_row.addWidget(self.clear_history_btn)
        filter_row.addWidget(self.refresh_btn)
        filter_row.addWidget(self.sort_asc_btn)
        filter_row.addWidget(self.sort_desc_btn)
        
        self.table = DndTableWidget(0, 1)
        self.table.directory_dropped.connect(self.load_from_dir)
        self.table.setHorizontalHeaderLabels(["–ò–º—è"])
        self.table.setSelectionBehavior(QTableWidget.SelectRows)
        self.table.setSelectionMode(QTableWidget.ExtendedSelection)
        self.table.setEditTriggers(QTableWidget.NoEditTriggers)
        header = self.table.horizontalHeader()
        header.setStretchLastSection(True)
        self.table.verticalHeader().setVisible(False)
        
        self.preview = QLabel()
        self.preview.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.preview.setFixedHeight(200)
        
        self._layout.addLayout(header_layout)
        self._layout.addLayout(filter_row)
        self._layout.addWidget(self.table, 1)
        self._layout.addWidget(self.preview)
        
        self.files = []  # [(name, path)]
        self.filtered = []  # –∏–Ω–¥–µ–∫—Å—ã –≤–∏–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.dir_path = ""
        self.sort_order = "asc"  # asc, desc, none
        self.filter_combo.lineEdit().textChanged.connect(self.apply_filter)
        self.table.currentCellChanged.connect(self.show_preview)
        self.load_filter_history()

    def update_path_label(self):
        """üè∑Ô∏è –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∫—É —Å –ø—É—Ç–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""
        if self.dir_path:
            # üìÇ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –ø–∞–ø–∫–∏ –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            path_obj = Path(self.dir_path)
            if path_obj.parent.name:
                display_path = f"{path_obj.parent.name} / {path_obj.name}"
            else:
                display_path = path_obj.name
            self.path_label.setText(display_path)
            self.path_label.setStyleSheet("color: #2e7d32; font-weight: bold; padding: 4px; background: #e8f5e8; border-radius: 4px;")
        else:
            self.path_label.setText("–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            self.path_label.setStyleSheet("color: #666; font-style: italic; padding: 4px;")

    def load_files(self, files, dir_path=None):
        # üîÑ –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        sorted_files = sorted(files, key=lambda f: natural_sort_key(os.path.basename(f)))
        self.files = [(os.path.basename(f), f) for f in sorted_files]
        if dir_path:
            self.dir_path = dir_path
        self.update_path_label()  # üè∑Ô∏è –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –ø—É—Ç–∏
        self.apply_filter()

    def load_from_dir(self, dir_path):
        exts = {".png", ".jpg", ".jpeg", ".tif", ".tiff", ".bmp"}
        files = [
            str(Path(dir_path) / f)
            for f in os.listdir(dir_path)
            if Path(f).suffix.lower() in exts
        ]
        self.load_files(files, dir_path)

    def restore_state(self, settings: QSettings):
        dir_path = settings.value(f"{self.settings_key}/dir", "")
        filter_text = settings.value(f"{self.settings_key}/filter", "")
        sort_order = settings.value(f"{self.settings_key}/sort_order", "asc")
        self.sort_order = sort_order
        self.load_filter_history()
        if dir_path and os.path.isdir(dir_path):
            exts = {".png", ".jpg", ".jpeg", ".tif", ".tiff", ".bmp"}
            files = [
                str(Path(dir_path) / f)
                for f in os.listdir(dir_path)
                if Path(f).suffix.lower() in exts
            ]
            self.load_files(files, dir_path)
        self.filter_combo.setCurrentText(filter_text)
        self.apply_filter()

    def load_filter_history(self):
        settings = QSettings("imgdiff", "imgdiff_gui")
        history = settings.value(f"{self.settings_key}/filter_history", [])
        if history:
            self.filter_combo.clear()
            self.filter_combo.addItems(history)

    def save_filter_history(self):
        settings = QSettings("imgdiff", "imgdiff_gui")
        items = [self.filter_combo.itemText(i) for i in range(self.filter_combo.count()) if self.filter_combo.itemText(i)]
        settings.setValue(f"{self.settings_key}/filter_history", items)

    def clear_filter(self):
        self.filter_combo.setCurrentText("")
        self.apply_filter()

    def clear_filter_history(self):
        self.filter_combo.clear()
        self.save_filter_history()

    def sort_ascending(self):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é"""
        self.sort_order = "asc"
        self.apply_filter()

    def sort_descending(self):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é"""
        self.sort_order = "desc"
        self.apply_filter()

    def refresh_dir(self):
        if self.dir_path and os.path.isdir(self.dir_path):
            exts = {".png", ".jpg", ".jpeg", ".tif", ".tiff", ".bmp"}
            files = [
                str(Path(self.dir_path) / f)
                for f in os.listdir(self.dir_path)
                if Path(f).suffix.lower() in exts
            ]
            self.load_files(files, self.dir_path)

    def apply_filter(self):
        text = self.filter_combo.currentText().lower()
        self.table.setRowCount(0)
        self.filtered = []
        
        # üîç –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã
        filtered_files = []
        for idx, (name, path) in enumerate(self.files):
            if text in name.lower():
                filtered_files.append((idx, name, path))
        
        # üîÑ –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        if self.sort_order == "asc":
            filtered_files.sort(key=lambda x: natural_sort_key(x[1]))  # üìà –ø–æ –∏–º–µ–Ω–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
        elif self.sort_order == "desc":
            filtered_files.sort(key=lambda x: natural_sort_key(x[1]), reverse=True)  # üìâ –ø–æ –∏–º–µ–Ω–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        
        # ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        for idx, name, path in filtered_files:
            row = self.table.rowCount()
            self.table.insertRow(row)
            self.table.setItem(row, 0, QTableWidgetItem(name))
            self.filtered.append(idx)
        
        self.show_preview()

    def add_filter_to_history(self):
        text = self.filter_combo.currentText().strip()
        if text and self.filter_combo.findText(text) == -1:
            self.filter_combo.insertItem(0, text)
            self.save_filter_history()

    def selected_files(self):
        rows = set(idx.row() for idx in self.table.selectedIndexes())
        return [self.files[self.filtered[i]][1] for i in rows if i < len(self.filtered)]

    def all_files(self):
        return [self.files[i][1] for i in self.filtered]

    def show_preview(self, *args):
        row = self.table.currentRow()
        if row >= 0 and row < len(self.filtered):
            img_path = self.files[self.filtered[row]][1]
            pix = load_pixmap_scaled(img_path, max_size=400) # –ú–∞–ª–µ–Ω—å–∫–æ–µ –ø—Ä–µ–≤—å—é
            self.preview.setPixmap(pix.scaled(self.preview.size(), Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation))
        else:
            self.preview.clear()

    def save_state(self, settings: QSettings):
        settings.setValue(f"{self.settings_key}/dir", self.dir_path)
        settings.setValue(f"{self.settings_key}/filter", self.filter_combo.currentText())
        settings.setValue(f"{self.settings_key}/sort_order", self.sort_order)
        self.save_filter_history()

    def restore_state(self, settings: QSettings):
        dir_path = settings.value(f"{self.settings_key}/dir", "")
        filter_text = settings.value(f"{self.settings_key}/filter", "")
        sort_order = settings.value(f"{self.settings_key}/sort_order", "asc")
        self.sort_order = sort_order
        self.load_filter_history()
        if dir_path and os.path.isdir(dir_path):
            exts = {".png", ".jpg", ".jpeg", ".tif", ".tiff", ".bmp"}
            files = [
                str(Path(dir_path) / f)
                for f in os.listdir(dir_path)
                if Path(f).suffix.lower() in exts
            ]
            self.load_files(files, dir_path)
        self.filter_combo.setCurrentText(filter_text)
        self.apply_filter()

    def load_from_dir(self, dir_path):
        exts = {".png", ".jpg", ".jpeg", ".tif", ".tiff", ".bmp"}
        files = [
            str(Path(dir_path) / f)
            for f in os.listdir(dir_path)
            if Path(f).suffix.lower() in exts
        ]
        self.load_files(files, dir_path)

# --- ResultImageView ---
class ResultImageView(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.pixmap = QPixmap()
        self.offset = QPoint(0, 0)
        self.scale = 1.0
        self.min_scale = 0.1
        self.max_scale = 8.0
        self._drag = False
        self._last_pos = QPoint()
        self.setMouseTracking(True)
        self.setFocusPolicy(Qt.FocusPolicy.StrongFocus)

    def setPixmap(self, pixmap):
        self.pixmap = pixmap
        if not pixmap.isNull():
            self.scale = 1.0
            self.offset = QPoint(0, 0)
        else:
            self.scale = 1.0
            self.offset = QPoint(0, 0)
        self.update()

    def paintEvent(self, event):
        qp = QPainter(self)
        if self.scale == 1.0:
            qp.setRenderHint(QPainter.SmoothPixmapTransform, False)
        else:
            qp.setRenderHint(QPainter.SmoothPixmapTransform, True)
        qp.translate(self.offset)
        qp.scale(self.scale, self.scale)
        if not self.pixmap.isNull():
            qp.drawPixmap(0, 0, self.pixmap)
        qp.end()

    def wheelEvent(self, e):
        # –ó—É–º –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏ –±–µ–∑ Ctrl
        angle = e.angleDelta().y()
        factor = 1.2 if angle > 0 else 1/1.2
        old_scale = self.scale
        self.scale = max(self.min_scale, min(self.max_scale, self.scale * factor))
        mouse_pos = e.pos()
        rel = mouse_pos - self.offset
        relf = rel * self.scale / old_scale
        self.offset = mouse_pos - QPoint(int(relf.x()), int(relf.y()))
        self.update()

    def mousePressEvent(self, e):
        if e.button() == Qt.MouseButton.MiddleButton:
            self._drag = True
            self._last_pos = e.pos()

    def mouseMoveEvent(self, e):
        if self._drag:
            delta = e.pos() - self._last_pos
            self.offset += delta
            self._last_pos = e.pos()
            self.update()

    def mouseReleaseEvent(self, e):
        if e.button() == Qt.MouseButton.MiddleButton:
            self._drag = False

    def resizeEvent(self, e):
        self.update()

# --- SliderReveal —Å overlay-—Ä–µ–∂–∏–º–æ–º ---
class SliderReveal(QWidget):
    def __init__(self, pixmap_a, pixmap_b, parent=None):
        super().__init__(parent)
        self.pixmap_a = pixmap_a
        self.pixmap_b = pixmap_b
        self.slider_pos = 0.5
        self.overlay_mode = False
        self.scale = 1.0
        self.offset = QPoint(0, 0)
        self._drag = False
        self._last_pos = QPoint(0, 0)
        self._drag_mode = False
        self.min_scale = 0.1
        self.max_scale = 10.0
        
        # –ö—ç—à –¥–ª—è overlay –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self._overlay_cache = None
        self._overlay_cache_key = None
        
        self.setMouseTracking(True)
        self.setFocusPolicy(Qt.FocusPolicy.StrongFocus)

    def setPixmaps(self, pixmap_a, pixmap_b):
        self.pixmap_a = pixmap_a
        self.pixmap_b = pixmap_b
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self._overlay_cache = None
        self._overlay_cache_key = None
        self.update()

    def setOverlayMode(self, enabled):
        self.overlay_mode = enabled
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
        self._overlay_cache = None
        self._overlay_cache_key = None
        self.update()

    def _generate_overlay_cache(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ overlay –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —á–µ—Ç–∫–∏–º–∏ –∫–æ–Ω—Ç—É—Ä–∞–º–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏"""
        if self.pixmap_a is None or self.pixmap_b is None:
            return None
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        cache_key = (id(self.pixmap_a), id(self.pixmap_b))
        if self._overlay_cache is not None and self._overlay_cache_key == cache_key:
            return self._overlay_cache
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
            img_a = self.pixmap_a.toImage()
            img_b = self.pixmap_b.toImage()
            
            # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é QImage –≤ numpy
            # –í–º–µ—Å—Ç–æ –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –±–∞–π—Ç–∞–º
            def qimage_to_np_optimized(qimg):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA8888 –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
                qimg = qimg.convertToFormat(QImage.Format_RGBA8888)
                width = qimg.width()
                height = qimg.height()
                
                # –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –±–∞–π—Ç–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±—ã—Å—Ç—Ä–µ–µ —á–µ–º pixel())
                ptr = qimg.bits()
                ptr.setsize(width * height * 4)
                
                # –°–æ–∑–¥–∞–µ–º numpy –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–π—Ç–æ–≤
                arr = np.frombuffer(ptr, np.uint8).reshape((height, width, 4))
                return arr.copy()  # –ö–æ–ø–∏—Ä—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ numpy –º–∞—Å—Å–∏–≤—ã
            arr_a = qimage_to_np_optimized(img_a)
            arr_b = qimage_to_np_optimized(img_b)
            
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å QImage –æ–±—ä–µ–∫—Ç–æ–≤
            del img_a, img_b
            
            # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ —Ü–∏–∫–ª–æ–≤
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫–∏ –Ω–µ-–±–µ–ª—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º numpy –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            mask_a = np.any(arr_a[:, :, :3] < 250, axis=2)  # –õ—é–±–æ–π –∫–∞–Ω–∞–ª < 250 = –Ω–µ –±–µ–ª—ã–π
            mask_b = np.any(arr_b[:, :, :3] < 250, axis=2)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é
            out = np.full_like(arr_a, 255)
            
            # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –ø–∞–∫–µ—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö –ø–∏–∫—Å–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            
            # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è A (–ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π)
            out[mask_a] = [255, 0, 0, 120]  # RGBA: –∫—Ä–∞—Å–Ω—ã–π —Å alpha=120
            
            # –ó–µ–ª–µ–Ω—ã–π —Ç–æ–ª—å–∫–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π B (–Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è —Å A)
            only_b = mask_b & ~mask_a  # –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ò: B –ò –ù–ï A
            out[only_b] = [0, 255, 0, 180]  # RGBA: –∑–µ–ª–µ–Ω—ã–π —Å alpha=180
            
            # –°–∏–Ω–∏–π –¥–ª—è —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ A –∏ B)
            both = mask_a & mask_b  # –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ò: A –ò B
            out[both] = [0, 0, 255, 200]  # RGBA: —Å–∏–Ω–∏–π —Å alpha=200
            
            # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
            del arr_a, arr_b, mask_a, mask_b, only_b, both
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ QImage –Ω–∞–ø—Ä—è–º—É—é –∏–∑ numpy –º–∞—Å—Å–∏–≤–∞
            overlay = QImage(out.tobytes(), out.shape[1], out.shape[0], out.strides[0], QImage.Format_RGBA8888)
            
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º numpy –º–∞—Å—Å–∏–≤
            del out
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self._overlay_cache = overlay
            self._overlay_cache_key = cache_key
            
            return overlay
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ overlay: {e}")
            return None

    def paintEvent(self, event):
        if not self.pixmap_a or not self.pixmap_b:
            return
            
        qp = QPainter(self)
        qp.setRenderHint(QPainter.RenderHint.SmoothPixmapTransform, self.scale != 1.0)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        qp.translate(self.offset)
        qp.scale(self.scale, self.scale)
        
        if not self.overlay_mode:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–ª–∞–π–¥–µ—Ä–∞
            split_x = int(self.slider_pos * self.pixmap_a.width())
            qp.drawPixmap(0, 0, self.pixmap_a.copy(0, 0, split_x, self.pixmap_a.height()))
            qp.drawPixmap(split_x, 0, self.pixmap_b.copy(split_x, 0, self.pixmap_b.width() - split_x, self.pixmap_b.height()))
            # –õ–∏–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            qp.setPen(QColor(0, 120, 215, 180))
            qp.drawLine(split_x, 0, split_x, self.pixmap_a.height())
        else:
            # Overlay —Ä–µ–∂–∏–º —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            overlay = self._generate_overlay_cache()
            if overlay is not None:
                qp.drawImage(0, 0, overlay)
        qp.end()

    def wheelEvent(self, e):
        # –ó—É–º –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏ –±–µ–∑ Ctrl
        angle = e.angleDelta().y()
        factor = 1.2 if angle > 0 else 1/1.2
        old_scale = self.scale
        self.scale = max(self.min_scale, min(self.max_scale, self.scale * factor))
        mouse_pos = e.pos()
        rel = mouse_pos - self.offset
        relf = rel * self.scale / old_scale
        self.offset = mouse_pos - QPoint(int(relf.x()), int(relf.y()))
        self.update()

    def mousePressEvent(self, e):
        # –°—Ä–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ ‚Äî drag, –õ–ö–ú ‚Äî —Å–ª–∞–π–¥–µ—Ä
        if e.button() == Qt.MouseButton.MiddleButton:
            self._drag = True
            self._last_pos = e.pos()
            self._drag_mode = True
        elif e.button() == Qt.MouseButton.LeftButton:
            self._drag_mode = False
            self._drag = False
            self._last_x = e.x()
        super().mousePressEvent(e)

    def mouseMoveEvent(self, e):
        if self._drag and self._drag_mode:
            delta = e.pos() - self._last_pos
            self.offset += delta
            self._last_pos = e.pos()
            self.update()
        elif not self._drag_mode and e.buttons() & Qt.MouseButton.LeftButton and not self.overlay_mode:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∑—É–º–∞ –∏ –ø–∞–Ω–∞
            mouse_x = (e.x() - self.offset.x()) / self.scale
            if self.pixmap_a.width() > 0:
                self.slider_pos = min(max(mouse_x / self.pixmap_a.width(), 0.0), 1.0)
            self.update()
        super().mouseMoveEvent(e)

    def mouseReleaseEvent(self, e):
        if e.button() == Qt.MouseButton.MiddleButton:
            self._drag = False
            self._drag_mode = False
        super().mouseReleaseEvent(e)

    def resizeEvent(self, e):
        self.update()
        super().resizeEvent(e)

class MainWindow(QMainWindow):
    def __init__(self):
        print('init start')
        super().__init__()
        print('step 1')
        self.setWindowTitle("Image Diff UI ‚Äì Outline")
        self.resize(1400, 800)
        self.settings = QSettings("imgdiff", "imgdiff_gui")
        self.output_dir = self.settings.value("output_dir", "")
        self.dir_a = self.settings.value("dir_a", "")
        self.dir_b = self.settings.value("dir_b", "")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–º–µ—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω)
        self.alignment_manager = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞–ø–∫–∏ –≤—ã–≤–æ–¥–∞
        self.alignment_control_panel = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI
        
        print('step 2')
        # --- üîò –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ QGroupBox ---
        self.radio_all = QRadioButton("–°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ")
        self.radio_sel = QRadioButton("–°—Ä–∞–≤–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ")
        self.radio_sel.setChecked(True)
        self.radio_group = QButtonGroup()
        self.radio_group.addButton(self.radio_all)
        self.radio_group.addButton(self.radio_sel)
        radio_box = QGroupBox("‚öôÔ∏è –†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        radio_layout = QVBoxLayout()
        radio_layout.addWidget(self.radio_all)
        radio_layout.addWidget(self.radio_sel)
        radio_box.setLayout(radio_layout)
        radio_box.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                color: #424242;
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        print('step 3')
        self.compare_btn = QPushButton("‚ö° –°—Ä–∞–≤–Ω–∏—Ç—å")
        self.compare_btn.setStyleSheet("""
            QPushButton {
                background: #ff9800;
                color: white;
                border: none;
                border-radius: 8px;
                padding: 10px 20px;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background: #f57c00;
            }
        """)
        self.compare_btn.clicked.connect(self.compare)
        self.result_table = QTableWidget(0, 3)
        self.result_table.setHorizontalHeaderLabels(["–ò–º—è", "–°—Ç–∞—Ç—É—Å", ""])
        self.result_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.result_table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.result_table.verticalHeader().setVisible(False)
        self.result_table.setColumnHidden(2, True)
        self.result_table.itemDoubleClicked.connect(self.open_result)
        print('step 4')
        self.out_dir_label = QLabel("üì§ –ü–∞–ø–∫–∞ –≤—ã–≤–æ–¥–∞:")
        self.out_dir_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.out_dir_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #d84315;
                padding: 8px;
                background: #fbe9e7;
                border-radius: 6px;
                margin: 4px;
            }
        """)
        self.out_dir_btn = QPushButton("üìÅ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –≤—ã–≤–æ–¥–∞‚Ä¶")
        self.out_dir_btn.setStyleSheet("""
            QPushButton {
                background: #ff7043;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 8px 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: #ff5722;
            }
        """)
        self.out_dir_btn.clicked.connect(self.choose_out_dir)
        self.out_dir_refresh_btn = QPushButton('üîÑ')
        self.out_dir_refresh_btn.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        self.out_dir_refresh_btn.setFixedWidth(32)
        self.out_dir_refresh_btn.setStyleSheet("""
            QPushButton {
                background: #42a5f5;
                color: white;
                border: none;
                border-radius: 4px;
                font-size: 14px;
            }
            QPushButton:hover {
                background: #2196f3;
            }
        """)
        self.out_dir_refresh_btn.clicked.connect(self.load_results_from_output_dir)
        out_dir_row = QHBoxLayout()
        out_dir_row.addWidget(self.out_dir_btn)
        out_dir_row.addWidget(self.out_dir_refresh_btn)
        print('step 5')
        result_col = QVBoxLayout()
        result_col.addWidget(self.out_dir_label)
        result_col.addLayout(out_dir_row)
        result_col.addWidget(radio_box)
        result_col.addWidget(self.compare_btn)
        results_label = QLabel("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        results_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #6a1b9a;
                padding: 8px;
                background: #f3e5f5;
                border-radius: 6px;
                margin: 4px;
            }
        """)
        result_col.addWidget(results_label)
        result_col_w = QWidget()
        result_col_w.setLayout(result_col)
        result_col_w.setMinimumWidth(120)
        result_col_w.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Expanding)
        print('step 6')
        # --- –í–∫–ª–∞–¥–∫–∞ 1: ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ---
        self.fuzz_spin = QSpinBox()
        self.fuzz_spin.setRange(0, 100)
        self.fuzz_spin.setSuffix(" %")
        self.fuzz_spin.setValue(1)
        self.fuzz_spin.setToolTip("–î–æ–ø—É—Å–∫ (–ø—Ä–æ—Ü–µ–Ω—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –æ—Ç–ª–∏—á–∏–π, –∫–∞–∫ -fuzz –≤ magick)")
        self.fuzz_spin.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Fixed)
        self.thick_spin = QSpinBox()
        self.thick_spin.setRange(0, 20)
        self.thick_spin.setValue(3)
        self.thick_spin.setToolTip("–¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏ (px, –¥–ª—è Dilate Octagon)")
        self.thick_spin.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Fixed)
        self.color_btn = QPushButton()
        self.color_btn.setText("–¶–≤–µ—Ç: #FF0000")
        self.color_btn.setStyleSheet("background:#FF0000")
        self.color = QColor("#FF0000")
        self.color_btn.clicked.connect(self.choose_color)
        self.color_btn.setToolTip("–¶–≤–µ—Ç –∫–æ–Ω—Ç—É—Ä–∞ –æ—Ç–ª–∏—á–∏–π (HEX –∏–ª–∏ –∏–º—è, –∫–∞–∫ –≤ magick)")
        self.color_btn.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Fixed)
        # --- –ß–µ–∫–±–æ–∫—Å—ã –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–æ–∫ ---
        self.noise_chk = QCheckBox("–§–∏–ª—å—Ç—Ä —à—É–º–∞")
        self.noise_chk.setChecked(True)
        self.noise_chk.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Fixed)
        self.min_area_spin = QSpinBox()
        self.min_area_spin.setRange(1, 9999)
        self.min_area_spin.setValue(20)
        self.min_area_spin.setToolTip("–ú–∏–Ω. –ø–ª–æ—â–∞–¥—å –ø—è—Ç–Ω–∞ (px)")
        self.min_area_spin.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Fixed)
        self.gamma_spin = QDoubleSpinBox()
        self.gamma_spin.setRange(0.1, 5.0)
        self.gamma_spin.setSingleStep(0.1)
        self.gamma_spin.setValue(1.0)
        self.gamma_spin.setToolTip("–≠–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è alpha-weight")
        self.gamma_spin.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Fixed)
        self.add_color_btn = QPushButton()
        self.add_color_btn.setText("–¶–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ: #0066FF")
        self.add_color_btn.setStyleSheet("background:#0066FF")
        self.add_color = QColor("#0066FF")
        self.add_color_btn.clicked.connect(self.choose_add_color)
        self.add_color_btn.setToolTip("–¶–≤–µ—Ç –ø–æ—è–≤–∏–≤—à–µ–≥–æ—Å—è (HEX –∏–ª–∏ –∏–º—è)")
        self.add_color_btn.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Fixed)
        self.debug_chk = QCheckBox("Debug mode")
        self.debug_chk.setChecked(False)
        self.debug_chk.setToolTip("–°–æ—Ö—Ä–∞–Ω—è—Ç—å –º–∞—Å–∫–∏ –∏ alpha –≤ debug/")
        self.debug_chk.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Fixed)
        self.ssim_chk = QCheckBox("Use SSIM")
        self.ssim_chk.setChecked(False)
        self.ssim_chk.setToolTip("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSIM-–∏–Ω–¥–µ–∫—Å (–ª—É—á—à–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –º–µ–¥–ª–µ–Ω–Ω–µ–µ)")
        self.ssim_chk.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Fixed)
        # --- –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –±–ª–∏–∑–∫–∏—Ö –ª–∏–Ω–∏–π ---
        self.match_tolerance_spin = QSpinBox()
        self.match_tolerance_spin.setRange(0, 20)
        self.match_tolerance_spin.setValue(0)
        self.match_tolerance_spin.setToolTip("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∏–∫—Å–µ–ª—è—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è '—Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö' –ª–∏–Ω–∏–π (0 = –æ—Ç–∫–ª—é—á–µ–Ω–æ)")
        self.match_tolerance_spin.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Fixed)
        self.match_color_btn = QPushButton()
        self.match_color_btn.setText("–¶–≤–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: #0000FF")
        self.match_color_btn.setStyleSheet("background:#0000FF; color:white")
        self.match_color = QColor("#0000FF")
        self.match_color_btn.clicked.connect(self.choose_match_color)
        self.match_color_btn.setToolTip("–¶–≤–µ—Ç –¥–ª—è '—Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö' –ª–∏–Ω–∏–π")
        self.match_color_btn.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Fixed)
        param_form = QFormLayout()
        param_form.addRow("–î–æ–ø—É—Å–∫ (fuzz)", self.fuzz_spin)
        param_form.addRow("–¢–æ–ª—â–∏–Ω–∞ (px)", self.thick_spin)
        param_form.addRow("–¶–≤–µ—Ç", self.color_btn)
        param_form.addRow("–§–∏–ª—å—Ç—Ä —à—É–º–∞", self.noise_chk)
        param_form.addRow("Min area", self.min_area_spin)
        param_form.addRow("Gamma", self.gamma_spin)
        param_form.addRow("–¶–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ", self.add_color_btn)
        param_form.addRow("Debug", self.debug_chk)
        param_form.addRow("Use SSIM", self.ssim_chk)
        param_form.addRow("–î–æ–ø—É—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (px)", self.match_tolerance_spin)
        param_form.addRow("–¶–≤–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π", self.match_color_btn)
        param_group = QGroupBox("üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Outline")
        param_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                color: #424242;
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        param_group.setLayout(param_form)
        param_group.setMaximumWidth(350)
        # --- üìö –ü–æ—è—Å–Ω–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º ---
        param_help = QLabel(
            "<b>üìö –ü–æ—è—Å–Ω–µ–Ω–∏—è –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:</b><br>"
            "<b>–î–æ–ø—É—Å–∫ (fuzz):</b> –ü—Ä–æ—Ü–µ–Ω—Ç –ø–∏–∫—Å–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –∏ —Å—á–∏—Ç–∞—Ç—å—Å—è —Ä–∞–≤–Ω—ã–º–∏. –ß–µ–º –≤—ã—à–µ ‚Äî —Ç–µ–º –º–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ.<br>"
            "<b>–¢–æ–ª—â–∏–Ω–∞ (px):</b> –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ—Ç–ª–∏—á–∏–π.<br>"
            "<b>–¶–≤–µ—Ç:</b> –¶–≤–µ—Ç –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ—Ç–ª–∏—á–∏–π.<br>"
            "<b>–§–∏–ª—å—Ç—Ä —à—É–º–∞:</b> –í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –º–µ–ª–∫–∏—Ö —à—É–º–æ–≤.<br>"
            "<b>Min area:</b> –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –ø—è—Ç–Ω–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è.<br>"
            "<b>Gamma:</b> –≠–∫—Å–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è alpha-weight (–∫–æ–Ω—Ç—Ä–∞—Å—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è).<br>"
            "<b>–¶–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ:</b> –¶–≤–µ—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.<br>"
            "<b>Debug:</b> –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –º–∞—Å–∫–∏ –∏ alpha-–∫–∞–Ω–∞–ª—ã.<br>"
            "<b>Use SSIM:</b> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSIM –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ª—É—á—à–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –º–µ–¥–ª–µ–Ω–Ω–µ–µ).<br>"
            "<b>–î–æ–ø—É—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (px):</b> –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∏–∫—Å–µ–ª—è—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è '—Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö' –ª–∏–Ω–∏–π. –õ–∏–Ω–∏–∏ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –¥–æ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –∏ –æ–∫—Ä–∞—à–∏–≤–∞—é—Ç—Å—è –≤ —Å–∏–Ω–∏–π —Ü–≤–µ—Ç.<br>"
            "<b>–¶–≤–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:</b> –¶–≤–µ—Ç –¥–ª—è –ª–∏–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –∏–ª–∏ –ø–æ—á—Ç–∏ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏."
        )
        param_help.setWordWrap(True)
        param_help.setMaximumWidth(350)
        settings_layout = QVBoxLayout()
        settings_layout.addWidget(param_group, alignment=Qt.AlignmentFlag.AlignTop)
        settings_layout.addWidget(param_help, alignment=Qt.AlignmentFlag.AlignTop)
        settings_layout.addStretch(1)
        settings_tab = QWidget()
        settings_tab.setLayout(settings_layout)

        # --- –í–∫–ª–∞–¥–∫–∞ 2: üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ/–°–ª–∞–π–¥–µ—Ä ---
        # üìÅ –õ–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü: –≥—Ä–∏–¥ A
        print('left_col_w start')
        self.grp_a = FilteredTable("üìÅ –ü–∞–ø–∫–∞ A", "A")
        self.grp_a_label = QLabel("üìÅ –ü–∞–ø–∫–∞ A")
        self.grp_a_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.grp_a_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #1976d2;
                padding: 8px;
                background: #e3f2fd;
                border-radius: 6px;
                margin: 4px;
            }
        """)
        left_col = QVBoxLayout()
        left_col.addWidget(self.grp_a_label)
        left_col.addWidget(self.grp_a)
        left_col_w = QWidget()
        left_col_w.setLayout(left_col)
        left_col_w.setMinimumWidth(120)
        left_col_w.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Expanding)
        print('left_col_w end')
        print('step 7')
        # üìÅ –°—Ä–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü: –≥—Ä–∏–¥ B
        print('mid_col_w start')
        self.grp_b = FilteredTable("üìÅ –ü–∞–ø–∫–∞ B", "B")
        self.grp_b_label = QLabel("üìÅ –ü–∞–ø–∫–∞ B")
        self.grp_b_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.grp_b_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #388e3c;
                padding: 8px;
                background: #e8f5e8;
                border-radius: 6px;
                margin: 4px;
            }
        """)
        mid_col = QVBoxLayout()
        mid_col.addWidget(self.grp_b_label)
        mid_col.addWidget(self.grp_b)
        mid_col_w = QWidget()
        mid_col_w.setLayout(mid_col)
        mid_col_w.setMinimumWidth(120)
        mid_col_w.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Expanding)
        print('mid_col_w end')
        print('step 8')
        # üìä –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.out_dir_label = QLabel("üì§ –ü–∞–ø–∫–∞ –≤—ã–≤–æ–¥–∞:")
        self.out_dir_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.out_dir_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #d84315;
                padding: 8px;
                background: #fbe9e7;
                border-radius: 6px;
                margin: 4px;
            }
        """)
        self.out_dir_btn = QPushButton("üìÅ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –≤—ã–≤–æ–¥–∞‚Ä¶")
        self.out_dir_btn.setStyleSheet("""
            QPushButton {
                background: #ff7043;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 8px 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: #ff5722;
            }
        """)
        self.out_dir_btn.clicked.connect(self.choose_out_dir)
        # üîÑ –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.out_dir_refresh_btn = QPushButton('üîÑ')
        self.out_dir_refresh_btn.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        self.out_dir_refresh_btn.setFixedWidth(32)
        self.out_dir_refresh_btn.setStyleSheet("""
            QPushButton {
                background: #42a5f5;
                color: white;
                border: none;
                border-radius: 4px;
                font-size: 14px;
            }
            QPushButton:hover {
                background: #2196f3;
            }
        """)
        self.out_dir_refresh_btn.clicked.connect(self.load_results_from_output_dir)
        out_dir_row = QHBoxLayout()
        out_dir_row.addWidget(self.out_dir_btn)
        out_dir_row.addWidget(self.out_dir_refresh_btn)
        # --- üîò –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ QGroupBox ---
        self.radio_all = QRadioButton("–°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ")
        self.radio_sel = QRadioButton("–°—Ä–∞–≤–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ")
        self.radio_sel.setChecked(True)
        self.radio_group = QButtonGroup()
        self.radio_group.addButton(self.radio_all)
        self.radio_group.addButton(self.radio_sel)
        radio_box = QGroupBox("‚öôÔ∏è –†–µ–∂–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        radio_layout = QVBoxLayout()
        radio_layout.addWidget(self.radio_all)
        radio_layout.addWidget(self.radio_sel)
        radio_box.setLayout(radio_layout)
        radio_box.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                color: #424242;
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        
        # üíæ –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è overlay - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –ø–æ–¥ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏
        self.save_overlay_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å overlay")
        self.save_overlay_btn.setToolTip("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å overlay –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è)")
        self.save_overlay_btn.setStyleSheet("""
            QPushButton {
                background: #2196f3;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 8px 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: #1976d2;
            }
            QPushButton:disabled {
                background: #bdbdbd;
                color: #757575;
            }
        """)
        self.save_overlay_btn.clicked.connect(self.save_overlay)
        self.save_overlay_btn.setEnabled(False)  # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ overlay –∞–∫—Ç–∏–≤–µ–Ω
        

        
        result_col = QVBoxLayout()
        result_col.addWidget(self.out_dir_label)
        result_col.addLayout(out_dir_row)
        result_col.addWidget(radio_box)
        result_col.addWidget(self.save_overlay_btn)  # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞–º–∏
        results_label = QLabel("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        results_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #6a1b9a;
                padding: 8px;
                background: #f3e5f5;
                border-radius: 6px;
                margin: 4px;
            }
        """)
        result_col.addWidget(results_label)
        result_col.addWidget(self.result_table, 1)
        self.open_external_btn = QPushButton("üñºÔ∏è –û—Ç–∫—Ä—ã—Ç—å –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–µ")
        self.open_external_btn.setToolTip("–û—Ç–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Windows")
        self.open_external_btn.setStyleSheet("""
            QPushButton {
                background: #607d8b;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 6px 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: #455a64;
            }
        """)
        self.open_external_btn.clicked.connect(self.open_result_external)
        result_col.addWidget(self.open_external_btn)
        self.open_internal_viewer_btn = QPushButton("üîç –û—Ç–∫—Ä—ã—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ")
        self.open_internal_viewer_btn.setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ —Å zoom/drag")
        self.open_internal_viewer_btn.setStyleSheet("""
            QPushButton {
                background: #795548;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 6px 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: #5d4037;
            }
        """)
        self.open_internal_viewer_btn.clicked.connect(self.open_result_internal_viewer)
        result_col.addWidget(self.open_internal_viewer_btn)
        result_col_w = QWidget()
        result_col_w.setLayout(result_col)
        result_col_w.setMinimumWidth(120)
        result_col_w.setSizePolicy(QSizePolicy.Preferred, QSizePolicy.Expanding)
        print('result_col_w end')
        print('step 9')
        print('before splitter')
        self.splitter = QSplitter(Qt.Orientation.Horizontal)
        print('after splitter')
        self.splitter.addWidget(left_col_w)
        print('after add left')
        self.splitter.addWidget(mid_col_w)
        print('after add mid')
        self.splitter.addWidget(result_col_w)
        print('after add result')
        self.splitter.setSizes([180, 180, 180])
        print('after setSizes')
        self.splitter.setHandleWidth(4)
        print('after setHandleWidth')
        # --- üñºÔ∏è –°–ª–∞–π–¥–µ—Ä —Å–ø—Ä–∞–≤–∞ ---
        print('before slider_widget')
        self.slider_widget = QWidget()
        self.slider_layout = QVBoxLayout(self.slider_widget)
        print('after slider_widget')
        # --- üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–¥ —Å–ª–∞–π—Å–µ—Ä–æ–º ---
        self.slider_control = QHBoxLayout()
        self.overlay_chk = QCheckBox("Overlay")
        self.overlay_chk.setChecked(False)
        self.overlay_chk.setToolTip("–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –Ω–∞–ª–æ–∂–µ–Ω–∏—è (A=–∫—Ä–∞—Å–Ω—ã–π, B=–∑–µ–ª—ë–Ω—ã–π)")
        self.overlay_chk.stateChanged.connect(self.update_slider_overlay_mode)
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–∏—Å–∞—Ç—å –≤—Å—ë"
        self.fit_to_window_btn = QPushButton("üîç –í–ø–∏—Å–∞—Ç—å –≤—Å—ë")
        self.fit_to_window_btn.setToolTip("–í–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–∫–Ω–æ —Ü–µ–ª–∏–∫–æ–º")
        self.fit_to_window_btn.setStyleSheet("""
            QPushButton {
                background: #4caf50;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 6px 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: #388e3c;
            }
        """)
        self.fit_to_window_btn.clicked.connect(self.fit_to_window)
        
        self.prev_btn = QPushButton("‚óÄ")
        self.prev_btn.setFixedWidth(32)
        self.prev_btn.setToolTip("–ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–∞—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (‚Üê)")
        self.prev_btn.setStyleSheet("""
            QPushButton {
                background: #9c27b0;
                color: white;
                border: none;
                border-radius: 4px;
                font-weight: bold;
                font-size: 16px;
            }
            QPushButton:hover {
                background: #7b1fa2;
            }
        """)
        self.prev_btn.clicked.connect(self.navigate_previous)
        
        self.next_btn = QPushButton("‚ñ∂")
        self.next_btn.setFixedWidth(32)
        self.next_btn.setToolTip("–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (‚Üí)")
        self.next_btn.setStyleSheet("""
            QPushButton {
                background: #9c27b0;
                color: white;
                border: none;
                border-radius: 4px;
                font-weight: bold;
                font-size: 16px;
            }
            QPushButton:hover {
                background: #7b1fa2;
            }
        """)
        self.next_btn.clicked.connect(self.navigate_next)
        self.slider_control.addWidget(self.overlay_chk)
        self.slider_control.addWidget(self.fit_to_window_btn)
        self.slider_control.addStretch(1)
        self.slider_control.addWidget(self.prev_btn)
        self.slider_control.addWidget(self.next_btn)
        self.slider_layout.addLayout(self.slider_control)
        self.slider_header = QHBoxLayout()
        self.label_a = QLabel("A: <–Ω–µ –≤—ã–±—Ä–∞–Ω–æ>")
        self.label_a.setStyleSheet("""
            QLabel {
                font-weight: bold;
                color: #1976d2;
                padding: 4px;
                background: #e3f2fd;
                border-radius: 4px;
            }
        """)
        self.label_b = QLabel("B: <–Ω–µ –≤—ã–±—Ä–∞–Ω–æ>")
        self.label_b.setStyleSheet("""
            QLabel {
                font-weight: bold;
                color: #388e3c;
                padding: 4px;
                background: #e8f5e8;
                border-radius: 4px;
            }
        """)
        self.slider_header.addWidget(self.label_a)
        self.slider_header.addStretch(1)
        self.slider_header.addWidget(self.label_b)
        self.slider_layout.addLayout(self.slider_header)
        self.slider_reveal = SliderReveal(QPixmap(), QPixmap())
        self.slider_layout.addWidget(self.slider_reveal, 1)
        self.slider_reveal.setVisible(True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ—â–µ–Ω–∏–µ–º (–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç–∞)
        if self.output_dir:
            self.alignment_manager = ImageAlignmentManager(self.output_dir)
        else:
            self.alignment_manager = ImageAlignmentManager("")
        self.alignment_control_panel = AlignmentControlPanel(self.alignment_manager)
        self.alignment_control_panel.alignment_changed.connect(self.on_alignment_changed)
        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å–º–µ—â–µ–Ω–∏—è
        self.alignment_control_panel.setVisible(False)
        self.slider_layout.addWidget(self.alignment_control_panel)
        
        self.slider_widget.setMinimumWidth(600)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–æ–Ω—É –ø—Ä–µ–≤—å—é –≤ 1.5 —Ä–∞–∑–∞
        self.slider_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.result_image_view = ResultImageView()
        self.result_image_view.setVisible(False)
        self.slider_layout.addWidget(self.result_image_view, 1)
        self.current_result_index = 0
        # –£–¥–∞–ª—è–µ–º –≤—ã–∑–æ–≤ self.update_slider_view_mode()
        # self.update_slider_view_mode()  # –£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        print('after slider setup')
        # --- üéØ –ì–ª–∞–≤–Ω—ã–π QSplitter: —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏ + —Å–ª–∞–π–¥–µ—Ä ---
        print('before main_splitter')
        self.main_splitter = QSplitter(Qt.Orientation.Horizontal)
        print('after main_splitter')
        self.main_splitter.addWidget(self.splitter)
        print('after add splitter')
        self.main_splitter.addWidget(self.slider_widget)
        print('after add slider_widget')
        self.main_splitter.setSizes([540, 900])  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–æ–Ω—É –ø—Ä–µ–≤—å—é –≤ 1.5 —Ä–∞–∑–∞
        print('after main_splitter setSizes')
        self.main_splitter.setHandleWidth(4)
        print('after main_splitter setHandleWidth')
        # --- üìë Tabs ---
        print('before tabs')
        self.tabs = QTabWidget()
        print('after tabs')
        self.tabs.addTab(settings_tab, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        print('after add settings_tab')
        main_tab = QWidget()
        main_tab.setLayout(QHBoxLayout())
        main_tab.layout().addWidget(self.main_splitter)
        print('after main_tab layout')
        self.tabs.addTab(main_tab, "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ –°–ª–∞–π–¥–µ—Ä")
        print('after add main_tab')
        self.setCentralWidget(self.tabs)
        print('after setCentralWidget')
        # --- üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å ---
        self.setStyleSheet('''
            QWidget { background: #f7f7fa; }
            QTableWidget { background: #fff; border: 1px solid #bbb; border-radius: 6px; font-size: 13px; }
            QHeaderView::section { background: #eaeaea; font-weight: bold; border: none; border-bottom: 1px solid #bbb; }
            QPushButton { background: #e0e6f6; border: 1px solid #aab; border-radius: 6px; padding: 4px 10px; font-size: 13px; }
            QPushButton:hover { background: #d0d8f0; }
            QLabel { font-size: 13px; }
            QSplitter::handle { background: #b0b0b0; border: none; }
            QSplitter::handle:hover { background: #0078d7; }
        ''')
        print('after setStyleSheet')
        # --- üìä Status Bar ---
        self.progress_bar = QProgressBar()
        self.statusBar().addPermanentWidget(self.progress_bar)
        self.progress_bar.hide()
        print('after status bar')
        # --- üîó Connections ---
        self.grp_a.dir_btn.clicked.connect(lambda: self.load_files(self.grp_a, 'A'))
        self.grp_b.dir_btn.clicked.connect(lambda: self.load_files(self.grp_b, 'B'))
        self.grp_a.table.itemSelectionChanged.connect(self.update_slider)
        self.grp_b.table.itemSelectionChanged.connect(self.update_slider)
        self.grp_a.table.itemDoubleClicked.connect(self.open_table_image)
        self.grp_b.table.itemDoubleClicked.connect(self.open_table_image)
        self.result_table.itemSelectionChanged.connect(self.on_result_selection_changed)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.radio_all.toggled.connect(self.update_save_button_state)
        self.radio_sel.toggled.connect(self.update_save_button_state)
        self.grp_a.table.itemSelectionChanged.connect(self.update_save_button_state)
        self.grp_b.table.itemSelectionChanged.connect(self.update_save_button_state)
        
        print('after connections')
        self.restore_state()
        print('init end')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.update_save_button_state()

    def update_magick_label(self):
        path = self.magick_path or shutil.which(MAGICK) or "<–Ω–µ –Ω–∞–π–¥–µ–Ω>"
        self.magick_label.setText(f"magick.exe: {path}")

    def choose_magick(self):
        magick_path, _ = QFileDialog.getOpenFileName(self, "–£–∫–∞–∂–∏—Ç–µ magick.exe", "", "magick.exe (magick.exe)")
        if magick_path:
            self.magick_path = magick_path
            self.settings.setValue("magick_path", magick_path)
            self.update_magick_label()

    def update_out_dir_label(self):
        self.out_dir_label.setText(f"–ü–∞–ø–∫–∞ –≤—ã–≤–æ–¥–∞: {self.output_dir or '<–Ω–µ –≤—ã–±—Ä–∞–Ω–∞>'}")

    def choose_out_dir(self):
        dir_path = QFileDialog.getExistingDirectory(self, "–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", self.output_dir or "")
        if dir_path:
            self.output_dir = dir_path
            self.settings.setValue("output_dir", dir_path)
            self.update_out_dir_label()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç)
            self.alignment_manager = ImageAlignmentManager(dir_path)
            if self.alignment_control_panel:
                self.alignment_control_panel.alignment_manager = self.alignment_manager
                # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å–º–µ—â–µ–Ω–∏—è
                self.alignment_control_panel.setVisible(False)
            
            self.load_results_from_output_dir()
            self.update_save_button_state()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    def load_results_from_output_dir(self):
        if not self.output_dir or not os.path.isdir(self.output_dir):
            self.result_table.setRowCount(0)
            return
        exts = {".png", ".jpg", ".jpeg", ".tif", ".tiff", ".bmp"}
        files = [
            str(Path(self.output_dir) / f)
            for f in sorted(os.listdir(self.output_dir))
            if Path(f).suffix.lower() in exts
        ]
        self.result_table.setRowCount(0)
        for f in files:
            name = os.path.basename(f)
            row = self.result_table.rowCount()
            self.result_table.insertRow(row)
            self.result_table.setItem(row, 0, QTableWidgetItem(name))
            self.result_table.setItem(row, 1, QTableWidgetItem(""))
            self.result_table.setItem(row, 2, QTableWidgetItem(f))
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–µ–≤—å—é –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if hasattr(self, '_preview_cache'):
            self._preview_cache.clear()

    def choose_color(self):
        col = QColorDialog.getColor(self.color, self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç")
        if col.isValid():
            self.color = col
            self.color_btn.setText(f"–¶–≤–µ—Ç: {col.name()}")
            self.color_btn.setStyleSheet(f"background:{col.name()}")

    def choose_add_color(self):
        col = QColorDialog.getColor(self.add_color, self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ")
        if col.isValid():
            self.add_color = col
            self.add_color_btn.setText(f"–¶–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ: {col.name()}")
            self.add_color_btn.setStyleSheet(f"background:{col.name()}")

    def choose_match_color(self):
        col = QColorDialog.getColor(self.match_color, self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –¥–ª—è —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –ª–∏–Ω–∏–π")
        if col.isValid():
            self.match_color = col
            self.match_color_btn.setText(f"–¶–≤–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {col.name()}")
            self.match_color_btn.setStyleSheet(f"background:{col.name()}; color:white")

    def load_files(self, target: FilteredTable, which):
        dir_path = QFileDialog.getExistingDirectory(self, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è {which}", target.dir_path or "")
        if not dir_path:
            return
        exts = {".png", ".jpg", ".jpeg", ".tif", ".tiff", ".bmp"}
        files = [
            str(Path(dir_path) / f)
            for f in sorted(os.listdir(dir_path))
            if Path(f).suffix.lower() in exts
        ]
        target.load_files(files, dir_path)
        target.dir_path = dir_path
        target.apply_filter()
        target.show_preview()
        if which == 'A':
            self.dir_a = dir_path
            self.settings.setValue("dir_a", dir_path)
        elif which == 'B':
            self.dir_b = dir_path
            self.settings.setValue("dir_b", dir_path)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        self.update_save_button_state()

    def open_result(self, item):
        if item is not None:
            row = item.row()
            cell = self.result_table.item(row, 2)
            if cell is not None:
                path = cell.text()
                QDesktopServices.openUrl(QUrl.fromLocalFile(str(path)))

    def compare(self):
        files_a = self.grp_a.selected_files() if self.radio_sel.isChecked() else self.grp_a.all_files()
        files_b = self.grp_b.selected_files() if self.radio_sel.isChecked() else self.grp_b.all_files()
        if len(files_a) != len(files_b) or not files_a:
            QMessageBox.warning(self, "–ù–µ—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π –≤—ã–±–æ—Ä", "–í—ã–¥–µ–ª–∏—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —á–∏—Å–ª–æ —Ñ–∞–π–ª–æ–≤ –≤ –æ–±–æ–∏—Ö —Å–ø–∏—Å–∫–∞—Ö.")
            return
        if not self.output_dir:
            QMessageBox.warning(self, "–ù–µ—Ç –ø–∞–ø–∫–∏ –≤—ã–≤–æ–¥–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º gc –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é
        import gc
        
        self.progress_bar.setMaximum(len(files_a))
        self.progress_bar.setValue(0)
        self.progress_bar.show()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        exts = {".png", ".jpg", ".jpeg", ".tif", ".tiff", ".bmp"}
        all_result_files = [
            str(Path(self.output_dir) / f)
            for f in sorted(os.listdir(self.output_dir))
            if Path(f).suffix.lower() in exts
        ]
        self.result_table.setRowCount(0)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –≥—Ä–∏–¥ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏–∑ –ø–∞–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for f in all_result_files:
            name = os.path.basename(f)
            self.result_table.insertRow(self.result_table.rowCount())
            self.result_table.setItem(self.result_table.rowCount()-1, 0, QTableWidgetItem(name))
            self.result_table.setItem(self.result_table.rowCount()-1, 1, QTableWidgetItem(""))
            self.result_table.setItem(self.result_table.rowCount()-1, 2, QTableWidgetItem(f))
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∏–º–µ–Ω–∏
        name_to_row = {self.result_table.item(row, 0).text(): row for row in range(self.result_table.rowCount())}
        
        fuzz = self.fuzz_spin.value()
        thick = self.thick_spin.value()
        hex_color = self.color.name()
        match_tolerance = self.match_tolerance_spin.value()
        match_color = self.match_color
        
        for i, (a, b) in enumerate(zip(files_a, files_b)):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è Qt –¥–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ UI
            QApplication.processEvents()
            
            out_name = f"{Path(a).stem}__vs__{Path(b).stem}_outline.png"
            out_path = Path(self.output_dir) / out_name
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Ñ–∞–π–ª–µ
            self.progress_bar.setFormat(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {Path(a).name} vs {Path(b).name}")
            
            try:
                code = self.run_outline(a, b, out_path, fuzz, thick, hex_color, match_tolerance, match_color)
            except FileNotFoundError as e:
                logging.error(f"FileNotFoundError: {e}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}")
                self.progress_bar.hide()
                return
            except Exception as e:
                logging.error(f"Exception: {e}")
                status = f"Error: {e}"
                row = name_to_row.get(out_name)
                if row is not None:
                    self.result_table.setItem(row, 1, QTableWidgetItem(status))
                self.progress_bar.setValue(i + 1)
                continue
            
            if code == 0:
                status = "Equal"
            elif code == 1:
                status = "OK"
            else:
                status = "Error"
            
            row = name_to_row.get(out_name)
            if row is not None:
                self.result_table.setItem(row, 1, QTableWidgetItem(status))
            
            self.progress_bar.setValue(i + 1)
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –∫–∞–∂–¥—ã–µ 5 —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if (i + 1) % 5 == 0:
                gc.collect()
                QApplication.processEvents()
        
        self.progress_bar.hide()
        self.progress_bar.setFormat("")  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        gc.collect()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        success_count = 0
        error_count = 0
        equal_count = 0
        for row in range(self.result_table.rowCount()):
            status = self.result_table.item(row, 1).text()
            if status == "OK":
                success_count += 1
            elif status == "Equal":
                equal_count += 1
            elif status.startswith("Error"):
                error_count += 1
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        message = f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
        message += f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(files_a)}\n"
        message += f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        message += f"–ò–¥–µ–Ω—Ç–∏—á–Ω—ã: {equal_count}\n"
        message += f"–û—à–∏–±–æ–∫: {error_count}\n\n"
        message += f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É:\n{self.output_dir}"
        
        QMessageBox.information(self, "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", message)

    def add_result(self, name, status, path):
        row = self.result_table.rowCount()
        self.result_table.insertRow(row)
        self.result_table.setItem(row, 0, QTableWidgetItem(name))
        self.result_table.setItem(row, 1, QTableWidgetItem(status))
        self.result_table.setItem(row, 2, QTableWidgetItem(path))

    def run_outline(self, left, right, out_path, fuzz, thick, color_hex, match_tolerance, match_color):
        old = safe_cv2_imread(str(left))
        new = safe_cv2_imread(str(right))
        if old is None or new is None:
            raise FileNotFoundError(f"–ù–µ –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å {left} –∏–ª–∏ {right}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        old_h, old_w = old.shape[:2]
        new_h, new_w = new.shape[:2]
        
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if old_h > 8000 or old_w > 8000 or new_h > 8000 or new_w > 8000:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û–¥–Ω–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ ({old_w}x{old_h} –∏–ª–∏ {new_w}x{new_h}). –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
        
        # --- –ü—Ä–∏–≤–æ–¥–∏–º –æ–±–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º ---
        h = max(old.shape[0], new.shape[0])
        w = max(old.shape[1], new.shape[1])
        
        if old.shape[:2] != (h, w):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º INTER_LANCZOS4 –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏
            old = cv2.resize(old, (w, h), interpolation=cv2.INTER_LANCZOS4)
        if new.shape[:2] != (h, w):
            new = cv2.resize(new, (w, h), interpolation=cv2.INTER_LANCZOS4)
        
        sens = fuzz
        blur = 3  # default
        morph_open = self.noise_chk.isChecked()
        min_area = self.min_area_spin.value()
        kernel = thick
        alpha = 0.6  # default
        gamma = self.gamma_spin.value()
        del_color = (self.color.blue(), self.color.green(), self.color.red())
        add_color = (self.add_color.blue(), self.add_color.green(), self.add_color.red())
        match_color_bgr = (match_color.blue(), match_color.green(), match_color.red())
        debug = self.debug_chk.isChecked()
        use_ssim = self.ssim_chk.isChecked()
        debug_dir = Path(self.output_dir) / 'debug' if debug else Path('.')
        
        overlay, meta = diff_two_color(
            old_img=old,
            new_img=new,
            sens=sens,
            blur=blur,
            morph_open=morph_open,
            min_area=min_area,
            kernel=kernel,
            alpha=alpha,
            gamma=gamma,
            del_color=del_color,
            add_color=add_color,
            debug=debug,
            debug_dir=debug_dir,
            use_ssim=use_ssim,
            match_tolerance=match_tolerance,
            match_color=match_color_bgr
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Å–∂–∞—Ç–∏–µ–º –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        success = cv2.imwrite(str(out_path), overlay, [cv2.IMWRITE_PNG_COMPRESSION, 6])
        if not success:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ {out_path}")
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        del old, new, overlay
        
        return 1 if meta['diff_pixels'] > 0 else 0

    def update_slider(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
        self.update_slider_with_alignment()

    def update_slider_pair(self):
        # —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
        pass

    def update_slider_overlay_mode(self):
        self.slider_reveal.setOverlayMode(self.overlay_chk.isChecked())
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.update_save_button_state()

    def fit_to_window(self):
        """–í–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–∫–Ω–æ —Ü–µ–ª–∏–∫–æ–º"""
        if hasattr(self, 'slider_reveal') and self.slider_reveal.pixmap_a and self.slider_reveal.pixmap_b:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–∂–µ—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            widget_size = self.slider_reveal.size()
            img_width = max(self.slider_reveal.pixmap_a.width(), self.slider_reveal.pixmap_b.width())
            img_height = max(self.slider_reveal.pixmap_a.height(), self.slider_reveal.pixmap_b.height())
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –≤–ø–∏—Å—ã–≤–∞–Ω–∏—è –≤ –æ–∫–Ω–æ
            scale_x = widget_size.width() / img_width
            scale_y = widget_size.height() / img_height
            scale = min(scale_x, scale_y, 1.0)  # –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–æ–ª—å—à–µ 1.0
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–± –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
            self.slider_reveal.scale = scale
            self.slider_reveal.offset = QPoint(
                int((widget_size.width() - img_width * scale) // 2),
                int((widget_size.height() - img_height * scale) // 2)
            )
            self.slider_reveal.update()
            
        elif hasattr(self, 'result_image_view') and not self.result_image_view.pixmap.isNull():
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–∂–µ—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            widget_size = self.result_image_view.size()
            img_width = self.result_image_view.pixmap.width()
            img_height = self.result_image_view.pixmap.height()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –≤–ø–∏—Å—ã–≤–∞–Ω–∏—è –≤ –æ–∫–Ω–æ
            scale_x = widget_size.width() / img_width
            scale_y = widget_size.height() / img_height
            scale = min(scale_x, scale_y, 1.0)  # –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–æ–ª—å—à–µ 1.0
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–± –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
            self.result_image_view.scale = scale
            self.result_image_view.offset = QPoint(
                int((widget_size.width() - img_width * scale) // 2),
                int((widget_size.height() - img_height * scale) // 2)
            )
            self.result_image_view.update()

    def open_table_image(self, item):
        """–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã A –∏–ª–∏ B –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–µ"""
        if item is not None:
            row = item.row()
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑ –∫–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –±—ã–ª –∫–ª–∏–∫
            sender = self.sender()
            if sender == self.grp_a.table:
                if row < len(self.grp_a.filtered):
                    file_path = self.grp_a.files[self.grp_a.filtered[row]][1]
                    QDesktopServices.openUrl(QUrl.fromLocalFile(str(file_path)))
            elif sender == self.grp_b.table:
                if row < len(self.grp_b.filtered):
                    file_path = self.grp_b.files[self.grp_b.filtered[row]][1]
                    QDesktopServices.openUrl(QUrl.fromLocalFile(str(file_path)))

    def show_result_image_from_selection(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        row = self.result_table.currentRow()
        if row < 0:
            self.result_image_view.setPixmap(QPixmap())
            return
            
        img_path = self.result_table.item(row, 2).text()
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not os.path.isfile(img_path):
            self.result_image_view.setPixmap(QPixmap())
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if hasattr(self, '_preview_cache') and img_path in self._preview_cache:
            self.result_image_view.setPixmap(self._preview_cache[img_path])
            self.result_image_view.setToolTip(img_path)
            self.current_result_index = row
            return
            
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ QPixmap –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            pix = QPixmap(img_path)
            if not pix.isNull():
                pix.setDevicePixelRatio(1.0)
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if not hasattr(self, '_preview_cache'):
                    self._preview_cache = {}
                self._preview_cache[img_path] = pix
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
                if len(self._preview_cache) > 20:
                    # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç
                    oldest_key = next(iter(self._preview_cache))
                    del self._preview_cache[oldest_key]
                
                self.result_image_view.setPixmap(pix)
                self.result_image_view.setToolTip(img_path)
                self.current_result_index = row
            else:
                # Fallback –∫ cv2 –µ—Å–ª–∏ QPixmap –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å
                img = safe_cv2_imread(img_path)
                if img is not None:
                    pix = QPixmap.fromImage(cv2_to_qimage(img))
                    pix.setDevicePixelRatio(1.0)
                    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if not hasattr(self, '_preview_cache'):
                        self._preview_cache = {}
                    self._preview_cache[img_path] = pix
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
                    if len(self._preview_cache) > 20:
                        oldest_key = next(iter(self._preview_cache))
                        del self._preview_cache[oldest_key]
                    
                    self.result_image_view.setPixmap(pix)
                    self.result_image_view.setToolTip(img_path)
                    self.current_result_index = row
                else:
                    self.result_image_view.setPixmap(QPixmap())
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é: {e}")
            self.result_image_view.setPixmap(QPixmap())

    def get_result_files(self):
        if not self.output_dir or not os.path.isdir(self.output_dir):
            return []
        exts = {".png", ".jpg", ".jpeg", ".tif", ".tiff", ".bmp"}
        files = [
            str(Path(self.output_dir) / f)
            for f in sorted(os.listdir(self.output_dir))
            if Path(f).suffix.lower() in exts
        ]
        return files

    def navigate_result(self, delta):
        row = self.result_table.currentRow()
        n = self.result_table.rowCount()
        if n == 0:
            return
        if row < 0:
            row = 0
        else:
            row = (row + delta) % n
        self.result_table.selectRow(row)
        self.show_result_image_from_selection()

    def keyPressEvent(self, e):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        if self.tabs.currentWidget() == self.slider_widget:
            if not self.overlay_chk.isChecked():
                # –í —Ä–µ–∂–∏–º–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
                if e.key() == Qt.Key.Key_Right:
                    self.navigate_result(1)
                    return
                elif e.key() == Qt.Key.Key_Left:
                    self.navigate_result(-1)
                    return
            else:
                # –í —Ä–µ–∂–∏–º–µ overlay - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–∞—Ä–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                if e.key() == Qt.Key.Key_Right:
                    self.navigate_tables(1)
                    return
                elif e.key() == Qt.Key.Key_Left:
                    self.navigate_tables(-1)
                    return
        super().keyPressEvent(e)

    def navigate_previous(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–∞—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        self.navigate_tables(-1)
    
    def navigate_next(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        self.navigate_tables(1)
    
    def navigate_tables(self, delta):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö A –∏ B"""
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        rows_a = self.grp_a.table.rowCount()
        rows_b = self.grp_b.table.rowCount()
        
        if rows_a == 0 or rows_b == 0:
            return  # –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        curr_a = self.grp_a.table.currentRow()
        curr_b = self.grp_b.table.currentRow()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–∞ (–∏–º–µ–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ)
        if curr_a >= 0 and curr_b >= 0:
            # –û–±–µ —Ç–∞–±–ª–∏—Ü—ã –∏–º–µ—é—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ - –ø–µ—Ä–µ–º–µ—â–∞–µ–º –æ–±–µ
            new_a = curr_a + delta
            new_b = curr_b + delta
        elif curr_a >= 0:
            # –¢–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü–∞ A –∏–º–µ–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            new_a = curr_a + delta
            new_b = new_a  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å A
        elif curr_b >= 0:
            # –¢–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü–∞ B –∏–º–µ–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            new_b = curr_b + delta
            new_a = new_b  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å B
        else:
            # –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è - –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∫–æ–Ω—Ü–∞
            if delta > 0:
                new_a = 0
                new_b = 0
            else:
                new_a = rows_a - 1
                new_b = rows_b - 1
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        new_a = new_a % rows_a
        new_b = new_b % rows_b
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        self.grp_a.table.selectRow(new_a)
        self.grp_b.table.selectRow(new_b)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä —Å –Ω–æ–≤—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
        self.update_slider()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä–µ
        self.show_navigation_info(new_a, new_b)

    def show_navigation_info(self, row_a, row_b):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        rows_a = self.grp_a.table.rowCount()
        rows_b = self.grp_b.table.rowCount()
        
        if rows_a > 0 and rows_b > 0:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–ª–∞–π–¥–µ—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∑–∏—Ü–∏–∏
            file_a_name = self.grp_a.table.item(row_a, 0).text() if row_a < rows_a else "N/A"
            file_b_name = self.grp_b.table.item(row_b, 0).text() if row_b < rows_b else "N/A"
            
            self.label_a.setText(f"A: {file_a_name} ({row_a + 1}/{rows_a})")
            self.label_b.setText(f"B: {file_b_name} ({row_b + 1}/{rows_b})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            self.statusBar().showMessage(f"–ü–∞—Ä–∞ {row_a + 1}/{rows_a}: {file_a_name} ‚Üî {file_b_name}", 2000)

    def closeEvent(self, event):
        self.save_state()
        super().closeEvent(event)

    def save_state(self):
        self.grp_a.save_state(self.settings)
        self.grp_b.save_state(self.settings)
        self.settings.setValue("geometry", self.saveGeometry())
        self.settings.setValue("windowState", self.saveState())
        self.settings.setValue("fuzz", self.fuzz_spin.value())
        self.settings.setValue("thick", self.thick_spin.value())
        self.settings.setValue("color", self.color.name())
        self.settings.setValue("radio_all", self.radio_all.isChecked())
        self.settings.setValue("output_dir", self.output_dir)
        self.settings.setValue("dir_a", self.dir_a)
        self.settings.setValue("dir_b", self.dir_b)
        self.settings.setValue("noise", self.noise_chk.isChecked())
        self.settings.setValue("min_area", self.min_area_spin.value())
        self.settings.setValue("gamma", self.gamma_spin.value())
        self.settings.setValue("add_color", self.add_color.name())
        self.settings.setValue("debug", self.debug_chk.isChecked())
        self.settings.setValue("ssim", self.ssim_chk.isChecked())
        self.settings.setValue("match_tolerance", self.match_tolerance_spin.value())
        self.settings.setValue("match_color", self.match_color.name())
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–ø–ª–∏—Ç—Ç–µ—Ä–æ–≤
        self.settings.setValue("splitter_sizes", self.splitter.sizes())
        self.settings.setValue("main_splitter_sizes", self.main_splitter.sizes())

    def restore_state(self):
        self.grp_a.restore_state(self.settings)
        self.grp_b.restore_state(self.settings)
        geo = self.settings.value("geometry")
        if geo:
            self.restoreGeometry(geo)
        winstate = self.settings.value("windowState")
        if winstate:
            self.restoreState(winstate)
        fuzz = self.settings.value("fuzz")
        if fuzz:
            self.fuzz_spin.setValue(int(fuzz))
        thick = self.settings.value("thick")
        if thick:
            self.thick_spin.setValue(int(thick))
        color = self.settings.value("color")
        if color:
            self.color = QColor(color)
            self.color_btn.setText(f"–¶–≤–µ—Ç: {self.color.name()}")
            self.color_btn.setStyleSheet(f"background:{self.color.name()}")
        radio_all = self.settings.value("radio_all")
        if radio_all is not None:
            self.radio_all.setChecked(radio_all == "true" or radio_all is True)
        self.output_dir = self.settings.value("output_dir", "")
        self.dir_a = self.settings.value("dir_a", "")
        self.dir_b = self.settings.value("dir_b", "")
        self.grp_a.dir_path = self.dir_a
        self.grp_b.dir_path = self.dir_b
        self.update_out_dir_label()
        self.load_results_from_output_dir()
        noise = self.settings.value("noise")
        if noise is not None:
            self.noise_chk.setChecked(noise == "true" or noise is True)
        min_area = self.settings.value("min_area")
        if min_area:
            self.min_area_spin.setValue(int(min_area))
        gamma = self.settings.value("gamma")
        if gamma:
            self.gamma_spin.setValue(float(gamma))
        add_color = self.settings.value("add_color")
        if add_color:
            self.add_color = QColor(add_color)
            self.add_color_btn.setText(f"–¶–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ: {self.add_color.name()}")
            self.add_color_btn.setStyleSheet(f"background:{self.add_color.name()}")
        debug = self.settings.value("debug")
        if debug is not None:
            self.debug_chk.setChecked(debug == "true" or debug is True)
        ssim = self.settings.value("ssim")
        if ssim is not None:
            self.ssim_chk.setChecked(ssim == "true" or ssim is True)
        match_tolerance = self.settings.value("match_tolerance")
        if match_tolerance:
            self.match_tolerance_spin.setValue(int(match_tolerance))
        match_color = self.settings.value("match_color")
        if match_color:
            self.match_color = QColor(match_color)
            self.match_color_btn.setText(f"–¶–≤–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {self.match_color.name()}")
            self.match_color_btn.setStyleSheet(f"background:{self.match_color.name()}; color:white")
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–ø–ª–∏—Ç—Ç–µ—Ä–æ–≤
        splitter_sizes = self.settings.value("splitter_sizes")
        if splitter_sizes:
            try:
                self.splitter.setSizes([int(x) for x in splitter_sizes])
            except Exception:
                pass
        main_splitter_sizes = self.settings.value("main_splitter_sizes")
        if main_splitter_sizes:
            try:
                self.main_splitter.setSizes([int(x) for x in main_splitter_sizes])
            except Exception:
                pass
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–º–µ—â–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞–ø–∫–∞ –≤—ã–≤–æ–¥–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç)
        if self.output_dir:
            self.alignment_manager = ImageAlignmentManager(self.output_dir)
            if self.alignment_control_panel:
                self.alignment_control_panel.alignment_manager = self.alignment_manager
                # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å–º–µ—â–µ–Ω–∏—è
                self.alignment_control_panel.setVisible(False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.update_save_button_state()

    def update_result_table(self):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ B
        files = self.grp_b.all_files()
        self.result_table.setRowCount(0)
        for f in files:
            name = os.path.basename(f)
            self.result_table.insertRow(self.result_table.rowCount())
            self.result_table.setItem(self.result_table.rowCount()-1, 0, QTableWidgetItem(name))
            self.result_table.setItem(self.result_table.rowCount()-1, 1, QTableWidgetItem(""))
            self.result_table.setItem(self.result_table.rowCount()-1, 2, QTableWidgetItem(f))

    def on_result_selection_changed(self):
        if not self.overlay_chk.isChecked():
            self.show_result_image_from_selection()

    def open_result_external(self):
        row = self.result_table.currentRow()
        if row < 0:
            return
        cell = self.result_table.item(row, 2)
        if cell is not None:
            path = cell.text()
            if os.path.isfile(path):
                QDesktopServices.openUrl(QUrl.fromLocalFile(str(path)))

    def open_result_internal_viewer(self):
        row = self.result_table.currentRow()
        if row < 0:
            return
        cell = self.result_table.item(row, 2)
        if cell is not None:
            path = cell.text()
            if os.path.isfile(path):
                img = safe_cv2_imread(path)
                if img is not None:
                    pix = QPixmap.fromImage(cv2_to_qimage(img))
                    pix.setDevicePixelRatio(1.0)
                    self._external_viewer = ExternalResultViewer(pix, title=os.path.basename(path))
                    self._external_viewer.show()

    def save_overlay(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç overlay –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not self.overlay_chk.isChecked():
            QMessageBox.warning(self, "–†–µ–∂–∏–º overlay –Ω–µ –≤–∫–ª—é—á–µ–Ω", "–°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º overlay –≤ —Å–ª–∞–π–¥–µ—Ä–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        # –ü—Ä–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ" (radio_all) –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤—ã–±–æ—Ä –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Å–µ —Ñ–∞–π–ª—ã
        # –ü—Ä–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ" (radio_sel) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        files_a = self.grp_a.selected_files() if self.radio_sel.isChecked() else self.grp_a.all_files()
        files_b = self.grp_b.selected_files() if self.radio_sel.isChecked() else self.grp_b.all_files()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        mode = "–≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ" if self.radio_sel.isChecked() else "–≤—Å–µ"
        logging.info(f"–†–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {mode}. –§–∞–π–ª–æ–≤ A: {len(files_a)}, —Ñ–∞–π–ª–æ–≤ B: {len(files_b)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        if not files_a or not files_b:
            QMessageBox.warning(self, "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ –æ–±–µ–∏—Ö –ø–∞–ø–∫–∞—Ö.")
            return
            
        if self.radio_sel.isChecked() and len(files_a) != len(files_b):
            QMessageBox.warning(self, "–ù–µ—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π –≤—ã–±–æ—Ä", 
                              f"–í—ã–¥–µ–ª–µ–Ω–æ {len(files_a)} —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ A –∏ {len(files_b)} —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ B.\n"
                              "–í—ã–¥–µ–ª–∏—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –æ–±–µ–∏—Ö –ø–∞–ø–∫–∞—Ö.")
            return
            
        if not self.output_dir:
            QMessageBox.warning(self, "–ù–µ—Ç –ø–∞–ø–∫–∏ –≤—ã–≤–æ–¥–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º gc –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é
        import gc
        
        self.progress_bar.setMaximum(len(files_a))
        self.progress_bar.setValue(0)
        self.progress_bar.show()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        exts = {".png", ".jpg", ".jpeg", ".tif", ".tiff", ".bmp"}
        all_result_files = [
            str(Path(self.output_dir) / f)
            for f in sorted(os.listdir(self.output_dir))
            if Path(f).suffix.lower() in exts
        ]
        self.result_table.setRowCount(0)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –≥—Ä–∏–¥ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏–∑ –ø–∞–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for f in all_result_files:
            name = os.path.basename(f)
            self.result_table.insertRow(self.result_table.rowCount())
            self.result_table.setItem(self.result_table.rowCount()-1, 0, QTableWidgetItem(name))
            self.result_table.setItem(self.result_table.rowCount()-1, 1, QTableWidgetItem(""))
            self.result_table.setItem(self.result_table.rowCount()-1, 2, QTableWidgetItem(f))
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∏–º–µ–Ω–∏
        name_to_row = {self.result_table.item(row, 0).text(): row for row in range(self.result_table.rowCount())}
        
        success_count = 0
        error_count = 0
        
        for i, (a, b) in enumerate(zip(files_a, files_b)):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è Qt –¥–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ UI
            QApplication.processEvents()
            
            out_name = f"{Path(a).stem}__overlay__{Path(b).stem}.png"
            out_path = Path(self.output_dir) / out_name
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Ñ–∞–π–ª–µ
            self.progress_bar.setFormat(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ overlay: {Path(a).name} vs {Path(b).name}")
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
                img_a_cv = safe_cv2_imread(a)
                img_b_cv = safe_cv2_imread(b)
                
                if img_a_cv is None or img_b_cv is None:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–Ω–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {a} –∏–ª–∏ {b}")

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ QImage –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                img_a = QPixmap.fromImage(cv2_to_qimage(img_a_cv))
                img_b = QPixmap.fromImage(cv2_to_qimage(img_b_cv))
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π SliderReveal –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ overlay –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
                temp_slider = SliderReveal(img_a, img_b)
                temp_slider.setOverlayMode(True)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º overlay –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
                overlay_qimage = temp_slider._generate_overlay_cache()
                
                if overlay_qimage is None:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å overlay")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                success = overlay_qimage.save(str(out_path), "PNG")
                
                if not success:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {out_path}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
                row = name_to_row.get(out_name)
                if row is not None:
                    self.result_table.setItem(row, 1, QTableWidgetItem("OK"))
                else:
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –µ—â–µ –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                    self.result_table.insertRow(self.result_table.rowCount())
                    self.result_table.setItem(self.result_table.rowCount()-1, 0, QTableWidgetItem(out_name))
                    self.result_table.setItem(self.result_table.rowCount()-1, 1, QTableWidgetItem("OK"))
                    self.result_table.setItem(self.result_table.rowCount()-1, 2, QTableWidgetItem(str(out_path)))
                
                success_count += 1
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è overlay –¥–ª—è {a} vs {b}: {e}")
                status = f"Error: {e}"
                row = name_to_row.get(out_name)
                if row is not None:
                    self.result_table.setItem(row, 1, QTableWidgetItem(status))
                error_count += 1
            
            self.progress_bar.setValue(i + 1)
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –∫–∞–∂–¥—ã–µ 5 —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if (i + 1) % 5 == 0:
                gc.collect()
                QApplication.processEvents()
        
        self.progress_bar.hide()
        self.progress_bar.setFormat("")  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        gc.collect()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        mode = "–≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ" if self.radio_sel.isChecked() else "–≤—Å–µ"
        message = f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ overlay –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
        message += f"–†–µ–∂–∏–º: {mode}\n"
        message += f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(files_a)}\n"
        message += f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        message += f"–û—à–∏–±–æ–∫: {error_count}\n\n"
        message += f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É:\n{self.output_dir}"
        
        if error_count > 0:
            QMessageBox.warning(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏", message)
        else:
            QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", message)

    def update_save_button_state(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ overlay –≤–∫–ª—é—á–µ–Ω –ò –µ—Å—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        files_a = self.grp_a.selected_files() if self.radio_sel.isChecked() else self.grp_a.all_files()
        files_b = self.grp_b.selected_files() if self.radio_sel.isChecked() else self.grp_b.all_files()
        has_files = len(files_a) > 0 and len(files_b) > 0 and len(files_a) == len(files_b)
        has_output_dir = bool(self.output_dir)
        overlay_checked = self.overlay_chk.isChecked()
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ overlay –≤–∫–ª—é—á–µ–Ω
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ save_overlay –º–µ—Ç–æ–¥–µ
        should_enable = overlay_checked
        self.save_overlay_btn.setEnabled(should_enable)
    
    def on_alignment_changed(self, offset_x: int, offset_y: int):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–º–µ—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω)"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä —Å –Ω–æ–≤—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
        self.update_slider_with_alignment()
    
    def update_slider_with_alignment(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ª–∞–π–¥–µ—Ä —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
        # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–º–µ—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É –±–µ–∑ —Å–º–µ—â–µ–Ω–∏—è
        
        files_a = self.grp_a.selected_files()
        files_b = self.grp_b.selected_files()
        file_a = files_a[0] if files_a else None
        file_b = files_b[0] if files_b else None

        self.label_a.setText(f"A: {Path(file_a).name if file_a else '<–Ω–µ –≤—ã–±—Ä–∞–Ω–æ>'}")
        self.label_b.setText(f"B: {Path(file_b).name if file_b else '<–Ω–µ –≤—ã–±—Ä–∞–Ω–æ>'}")

        if file_a and file_b:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ (–±–µ–∑ —Å–º–µ—â–µ–Ω–∏—è)
            img_a_cv = safe_cv2_imread(file_a)
            img_b_cv = safe_cv2_imread(file_b)
            if img_a_cv is not None and img_b_cv is not None:
                img_a = QPixmap.fromImage(cv2_to_qimage(img_a_cv))
                img_b = QPixmap.fromImage(cv2_to_qimage(img_b_cv))
                img_a.setDevicePixelRatio(1.0)
                img_b.setDevicePixelRatio(1.0)
                
                # –í–†–ï–ú–ï–ù–ù–û: –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
                # aligned_a, aligned_b = self.alignment_manager.apply_alignment_to_pixmaps(
                #     img_a, img_b, file_a, file_b
                # )
                
                self.slider_reveal.setPixmaps(img_a, img_b)
                self.slider_reveal.setVisible(True)
                
                # –í–†–ï–ú–ï–ù–ù–û: –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ—â–µ–Ω–∏–µ–º
                # if self.alignment_control_panel:
                #     self.alignment_control_panel.set_current_images(file_a, file_b, img_a, img_b)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                self.update_save_button_state()
            else:
                self.slider_reveal.setVisible(False)
                self.save_overlay_btn.setEnabled(False)
        else:
            self.slider_reveal.setVisible(False)
            self.save_overlay_btn.setEnabled(False)


class ExternalResultViewer(QWidget):
    def __init__(self, pixmap, title="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"):
        super().__init__()
        self.setWindowTitle(title)
        self.viewer = ResultImageView()
        layout = QVBoxLayout(self)
        layout.addWidget(self.viewer)
        self.viewer.setPixmap(pixmap)
        self.resize(1200, 800)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle("Fusion")
    # –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è Fusion
    palette = app.palette()
    palette.setColor(palette.Window, QColor(245, 245, 245))
    palette.setColor(palette.Base, QColor(255, 255, 255))
    palette.setColor(palette.AlternateBase, QColor(240, 240, 240))
    palette.setColor(palette.Text, QColor(30, 30, 30))
    palette.setColor(palette.Button, QColor(230, 230, 230))
    palette.setColor(palette.ButtonText, QColor(30, 30, 30))
    palette.setColor(palette.Highlight, QColor(0, 120, 215))
    palette.setColor(palette.HighlightedText, QColor(255, 255, 255))
    app.setPalette(palette)
    w = MainWindow()
    w.show()
    sys.exit(app.exec_())

